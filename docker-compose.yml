services:

  nats-server:
    image: nats:latest
    ports:
      #Solo exponemos el puerto 8222 para poder monitorizar el servidor NATS los demas no es necesario porque es una red interna de docker y como no se conectas desde el exterior no es necesario exponerlos
      # - 4222:4222 # NATS server port
      - "8222:8222" # NATS monitoring port
      # - 6222:6222 # NATS clustering port
    networks:
      - app-network
  
  gateway:
    build: ./gateway
    ports:
      - ${CLIENT_GATEWAY_PORT}:3000
    volumes:
      - ./gateway/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3000
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}
      - KEYCLOAK_REALM=${KEYCLOAK_REALM}
      - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KEYCLOAK_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
    networks:
      - app-network

  products-ms:
    build: ./products-ms
    ports:
      - "3001:3001"
    depends_on:
      - products-database
    volumes:
      - ./products-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3001
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - DATABASE_URL=postgres://postgres:123@products_database:5432/products_db
    networks:
      - app-network

  products-database:
    container_name: products_database
    image: postgres:latest
    restart: always
    volumes:
      - ./products-ms/postgres:/var/lib/postgresql/data
    ports:
      - 5434:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=products_db
    networks:
      - app-network


  debts-ms:
    build: ./debts-ms
    ports:
      - "3008:3008"
    depends_on:
      - debts-database
    volumes:
      - ./debts-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3008
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - DATABASE_URL=postgres://postgres:123@debts_database:5432/debts_db
    networks:
      - app-network

  debts-database:
    container_name: debts_database
    image: postgres:latest
    restart: always
    volumes:
      - ./debts-ms/postgres:/var/lib/postgresql/data
    ports:
      - 5438:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=debts_db
    networks:
      - app-network

  categories-ms:
    build: ./categories-ms
    ports:
      - "3005:3005"
    depends_on:
      - categories-database
    volumes:
      - ./categories-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3005
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - DATABASE_URL=postgres://postgres:123@categories_database:5432/categories_db
    networks:
      - app-network

  categories-database:
    container_name: categories_database
    image: postgres:latest
    restart: always
    volumes:
      - ./categories-ms/postgres:/var/lib/postgresql/data
    ports:
      - 5435:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=categories_db
    networks:
      - app-network


  reviews-ms:
    build: ./reviews
    ports:
      - "3006:3006"
    depends_on:
      - reviews-database
    volumes:
      - ./reviews/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3006
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - DATABASE_URL=postgres://postgres:123@reviews_database:5432/reviews_db
    networks:
      - app-network

  reviews-database:
    container_name: reviews_database
    image: postgres:latest
    restart: always
    volumes:
      - ./reviews/postgres:/var/lib/postgresql/data
    ports:
      - 5436:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=reviews_db
    networks:
      - app-network

  orders-ms:
    build: ./orders-ms
    depends_on:
      - orders-database
    ports:
      - "3002:3002"
    volumes:
      - ./orders-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3002
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - DATABASE_URL=postgres://postgres:123@orders_database:5432/orders_db
    networks:
      - app-network

  orders-database:
    container_name: orders_database
    image: postgres:latest
    restart: always
    volumes:
      - ./orders-ms/postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=orders_db
    networks:
      - app-network

  favorites-ms:
    build: ./favorites-ms
    depends_on:
      - favorites-database
    ports:
      - "3007:3007"
    volumes:
      - ./favorites-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=3007
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - DATABASE_URL=postgres://postgres:123@favorites_database:5432/favorites_db
    networks:
      - app-network

  favorites-database:
    container_name: favorites_database
    image: postgres:latest
    restart: always
    volumes:
      - ./favorites-ms/postgres:/var/lib/postgresql/data
    ports:
      - 5437:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=favorites_db
    networks:
      - app-network

#Payments Microservice
  payments-ms:
    container_name: payments-ms
    build: ./payments-ms
    ports:
      - "3003:3003"
    volumes:
      - ./payments-ms/src:/usr/src/app/src
    command: npm run start:dev
    environment:
      - PORT=${PAYMENTS_MS_PORT}
      - NATS_SERVERS=nats://nats-server:4222
      - WATCHPACK_POLLING=true
      - STRIPE_SECRET_KEY=${PAYMENTS_MS_STRIPE_SECRET_KEY}
      - STRIPE_SUCCESS_URL=${PAYMENTS_MS_STRIPE_SUCCESS_URL}
      - STRIPE_CANCEL_URL=${PAYMENTS_MS_STRIPE_CANCEL_URL}
      - STRIPE_ENDPOINT_SECRET=${PAYMENTS_MS_STRIPE_ENDPOINT_SECRET}
      - HOOKDECK_API_KEY=${HOOKDECK_API_KEY}
    networks:
      - app-network


#Keycloak Authentication

  keycloak-db:
    image: postgres:latest  # Cambiado a latest para usar la versión más reciente
    container_name: keycloak_postgres
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak_user
      - POSTGRES_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust  # Para solucionar el problema de autenticación
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest  # También podemos usar la última versión de Keycloak
    container_name: keycloak_microservice
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-db:5432/keycloak
      - KC_DB_USERNAME=keycloak_user
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    command: start-dev
    ports:
      - "8080:8080"
    depends_on:
      - keycloak-db
    networks:
      - app-network

networks:
  app-network:

volumes:
  keycloak_postgres_data: